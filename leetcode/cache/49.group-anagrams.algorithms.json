{"id":49,"fid":"49","name":"字母异位词分组","slug":"group-anagrams","link":"https://leetcode.cn/problems/group-anagrams/description/","percent":67.92386082233051,"level":"Medium","category":"algorithms","en_name":"Group Anagrams","cn_name":"字母异位词分组","totalAC":"654.7K","totalSubmit":"963.9K","likes":1855,"dislikes":0,"desc":"<p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p>\n\n<p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> strs = <code>[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]</code>\n<strong>输出: </strong>[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> strs = <code>[\"\"]</code>\n<strong>输出: </strong>[[\"\"]]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> strs = <code>[\"a\"]</code>\n<strong>输出: </strong>[[\"a\"]]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code>&nbsp;仅包含小写字母</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def groupAnagrams(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[List[str]]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:"},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function groupAnagrams(strs: string[]): string[][] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String[][]\n     */\n    function groupAnagrams($strs) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun groupAnagrams(strs: Array<String>): List<List<String>> {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<List<String>> groupAnagrams(List<String> strs) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func groupAnagrams(strs []string) [][]string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} strs\n# @return {String[][]}\ndef group_anagrams(strs)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (group-anagrams strs)\n  (-> (listof string?) (listof (listof string?)))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\ngroup_anagrams(Strs) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\n  def group_anagrams(strs) do\n    \n  end\nend"}],"testcase":"[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]","testable":true,"templateMeta":{"name":"groupAnagrams","params":[{"name":"strs","type":"string[]"}],"return":{"type":"list<list<string>>","dealloc":true}}}